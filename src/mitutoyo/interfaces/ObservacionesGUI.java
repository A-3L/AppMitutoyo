/**
 * AppMitutoyo is an application to show how works the implementation of the library JGuiExtensible
 * that develops a reusable gui pattern.
 * 
 * Copyright (C) 2022 Alberto Eiriz Lopez
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
*/
package mitutoyo.interfaces;

import mitutoyo.data.Observaciones;

/**
 * This class creates a graphical interface for the data structure with the same name
 * 
 * @author a31r1z
 */
public class ObservacionesGUI extends jguiextensible.JGuiSimple {

    private static final long serialVersionUID = 1L;

    private final Observaciones obs = new Observaciones();
    
    /**
     * Creates new Observacionesform JGuiSimple
     */
    public ObservacionesGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setMinimumSize(new java.awt.Dimension(200, 100));

        jScrollPane1.setMinimumSize(new java.awt.Dimension(200, 100));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Observaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Vera Sans", 1, 12))); // NOI18N
        jTextArea1.setMinimumSize(new java.awt.Dimension(100, 400));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Validates the data inserted in the diferent widgets of the gui
     * 
     * @return true of false if data inserted in the fields are valid
     */
    @Override
    protected boolean validateData() {        
        
       return true;
    }

    /**
     * Saves the data inserted in the gui
     */
    @Override
    protected void saveData() {
           
       if (jTextArea1.getText()!=null) obs.setText(jTextArea1.getText());
    }

    /**
     * Cleans the data inserted in the widgets of the gui
     */
    @Override
    protected void cleanData() {
        
       obs.borrarDatos();
    }

    /**
     * Updates the value of diferent widgets notified by other component whose name is id.
     * 
     * @param id name of the component that notifies a change in his value
     * @param value value that changes
     */
    @Override
    protected void updateChanges(String id, Object value) {}
        
 
}

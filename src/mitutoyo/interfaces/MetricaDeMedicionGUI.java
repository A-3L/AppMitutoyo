/**
 * AppMitutoyo is an application to show how works the implementation of the library JGuiExtensible
 * that develops a reusable gui pattern.
 * 
 * Copyright (C) 2022 Alberto Eiriz Lopez
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
*/
package mitutoyo.interfaces;

import mitutoyo.Utilidades;
import mitutoyo.data.MetricaDeMedicion;
import jguiextensible.JGuiSimple;

/**
 * This class creates a graphical interface for the data structure with the same name
 * 
 * @author a31r1z
 */
public class MetricaDeMedicionGUI extends JGuiSimple {

    private static final long serialVersionUID = 1L;
    
    private final MetricaDeMedicion metDeMed = new MetricaDeMedicion();
  
    /**
     * Creates new form CalibrePieDeReyGui
     */
    public MetricaDeMedicionGUI() {
          
        initComponents();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMetrMedicion = new javax.swing.JPanel();
        lblRango = new javax.swing.JLabel();
        lblPrecision = new javax.swing.JLabel();
        lblGraduacion = new javax.swing.JLabel();
        lblResolucion = new javax.swing.JLabel();
        lblPresionMedida = new javax.swing.JLabel();
        jftxRango = new javax.swing.JFormattedTextField();
        jftxPrecision = new javax.swing.JFormattedTextField();
        jftxResolucion = new javax.swing.JFormattedTextField();
        jftxGraduacion = new javax.swing.JFormattedTextField();
        jftxPresionDeMedida = new javax.swing.JFormattedTextField();

        setName("Metrica de medicion"); // NOI18N

        panelMetrMedicion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Metrica de Medicion", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Vera Sans", 1, 12))); // NOI18N
        panelMetrMedicion.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        panelMetrMedicion.setName("Metrica de Medicion"); // NOI18N

        lblRango.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        lblRango.setText("Rango [mm]");

        lblPrecision.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        lblPrecision.setText("PrecisionÂ± [mm]");

        lblGraduacion.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        lblGraduacion.setText("Graduacion");

        lblResolucion.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        lblResolucion.setText("Resolucion (mm)");

        lblPresionMedida.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N
        lblPresionMedida.setText("Presion de medida [N]");

        jftxRango.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftxRango.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftxRango.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N

        jftxPrecision.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftxPrecision.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftxPrecision.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N

        jftxResolucion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftxResolucion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftxResolucion.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N

        jftxGraduacion.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftxGraduacion.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftxGraduacion.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N

        jftxPresionDeMedida.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jftxPresionDeMedida.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftxPresionDeMedida.setFont(new java.awt.Font("URW Gothic", 0, 13)); // NOI18N

        javax.swing.GroupLayout panelMetrMedicionLayout = new javax.swing.GroupLayout(panelMetrMedicion);
        panelMetrMedicion.setLayout(panelMetrMedicionLayout);
        panelMetrMedicionLayout.setHorizontalGroup(
            panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetrMedicionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPresionMedida)
                    .addComponent(lblGraduacion)
                    .addComponent(lblResolucion)
                    .addComponent(lblPrecision)
                    .addComponent(lblRango))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jftxRango, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftxPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftxResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftxGraduacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftxPresionDeMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelMetrMedicionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblGraduacion, lblRango});

        panelMetrMedicionLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jftxGraduacion, jftxPrecision, jftxPresionDeMedida, jftxRango, jftxResolucion});

        panelMetrMedicionLayout.setVerticalGroup(
            panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMetrMedicionLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lblRango)
                    .addComponent(jftxRango, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrecision)
                    .addComponent(jftxPrecision, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResolucion)
                    .addComponent(jftxResolucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGraduacion)
                    .addComponent(jftxGraduacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelMetrMedicionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPresionMedida)
                    .addComponent(jftxPresionDeMedida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(panelMetrMedicion);

        getAccessibleContext().setAccessibleName("Metrica de medicion");
    }// </editor-fold>//GEN-END:initComponents
  
         
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField jftxGraduacion;
    private javax.swing.JFormattedTextField jftxPrecision;
    private javax.swing.JFormattedTextField jftxPresionDeMedida;
    private javax.swing.JFormattedTextField jftxRango;
    private javax.swing.JFormattedTextField jftxResolucion;
    private javax.swing.JLabel lblGraduacion;
    private javax.swing.JLabel lblPrecision;
    private javax.swing.JLabel lblPresionMedida;
    private javax.swing.JLabel lblRango;
    private javax.swing.JLabel lblResolucion;
    private javax.swing.JPanel panelMetrMedicion;
    // End of variables declaration//GEN-END:variables

 
    /**
     * Validates the data inserted in the diferent widgets of the gui
     * 
     * @return true of false if data inserted in the fields are valid
     */
    @Override
   protected boolean validateData() {
        
        return  Utilidades.matcher(jftxRango, "Rango",this) &&
                Utilidades.matcher(jftxPrecision, "Precision",this) &&
                Utilidades.matcher(jftxResolucion, "Resolucion",this) &&
                Utilidades.matcher(jftxGraduacion, "Graduacion",this) &&
                Utilidades.matcher(jftxPresionDeMedida, "PresionDeMedida",this);             
    } 
  
   /**
     * Saves the data inserted in the gui
     */
    @Override
      protected void saveData() {
  
     metDeMed.setGraduacion(Integer.valueOf(String.valueOf(jftxGraduacion.getValue())));
     metDeMed.setRango(Integer.valueOf(String.valueOf(jftxRango.getValue())));
     metDeMed.setPrecision(Integer.valueOf(String.valueOf(jftxPrecision.getValue())));
     metDeMed.setResolucion(Integer.valueOf(String.valueOf(jftxResolucion.getValue())));
     metDeMed.setPresionDeMedida(Integer.valueOf(String.valueOf(jftxPresionDeMedida.getValue())));
     
     metDeMed.guardarDatos();
   
    }
     
     /**
     * Cleans the data inserted in the widgets of the gui
     */
    @Override
      protected void cleanData() {
          
          jftxGraduacion.setValue(null);
          jftxRango.setValue(null);
          jftxPrecision.setValue(null);
          jftxResolucion.setValue(null);
          jftxPresionDeMedida.setValue(null); 
          
          metDeMed.borrarDatos();
          
      }
     
    /**
     * Updates the value of diferent widgets notified by other component whose name is id.
     * 
     * @param id name of the component that notifies a change in his value
     * @param value value that changes
     */  
    @Override
    protected void updateChanges(String id, Object value) {
     
             System.out.println("Actualizando Rango");
             
        switch(id) {
            case "rangoMedida" -> { jftxRango.setValue(value); }
            case "margen"-> { jftxRango.setValue(value);}
        }
    }
    
      
}